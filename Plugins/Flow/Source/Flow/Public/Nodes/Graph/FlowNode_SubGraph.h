// Copyright https://github.com/MothCocoon/FlowGraph/graphs/contributors

#pragma once

#include "Nodes/FlowNode.h"
#include "Interfaces/FlowDataPinGeneratorNodeInterface.h"

#include "FlowNode_SubGraph.generated.h"

/**
 * Creates instance of provided Flow Asset and starts its execution
 */
UCLASS(NotBlueprintable, meta = (DisplayName = "Sub Graph"))
class FLOW_API UFlowNode_SubGraph
	: public UFlowNode
	, public IFlowDataPinGeneratorNodeInterface
{
	GENERATED_UCLASS_BODY()

	friend class UFlowAsset;
	friend class FFlowNode_SubGraphDetails;
	friend class UFlowSubsystem;

	static FFlowPin StartPin;
	static FFlowPin FinishPin;
	
private:
	UPROPERTY(EditAnywhere, Category = "Graph")
	TSoftObjectPtr<UFlowAsset> Asset;

	/*
	 * Allow to create instance of the same Flow Asset as the asset containing this node
	 * Enabling it may cause an infinite loop, if graph would keep creating copies of itself
	 */
	UPROPERTY(EditAnywhere, Category = "Graph")
	bool bCanInstanceIdenticalAsset;
	
	UPROPERTY(SaveGame)
	FString SavedAssetInstanceName;

protected:
	virtual bool CanBeAssetInstanced() const;
	
	virtual void PreloadContent() override;
	virtual void FlushContent() override;

	virtual void ExecuteInput(const FName& PinName) override;
	virtual void Cleanup() override;

public:
	virtual void ForceFinishNode() override;

protected:
	virtual void OnLoad_Implementation() override;


#if WITH_EDITORONLY_DATA
protected:
	// All the classes allowed to be used as assets on this subgraph node
	UPROPERTY()
	TArray<TSubclassOf<UFlowAsset>> AllowedAssignedAssetClasses;

	// All the classes disallowed to be used as assets on this subgraph node
	UPROPERTY()
	TArray<TSubclassOf<UFlowAsset>> DeniedAssignedAssetClasses;
#endif

#if WITH_EDITOR
public:
	// IFlowContextPinSupplierInterface
	virtual bool SupportsContextPins() const override { return true; }
	virtual TArray<FFlowPin> GetContextInputs() const override;
	virtual TArray<FFlowPin> GetContextOutputs() const override;
	// --

	virtual FText GetNodeTitle() const override;
	virtual FString GetNodeDescription() const override;
	virtual UObject* GetAssetToEdit() override;
	virtual EDataValidationResult ValidateNode() override;
	
	// UObject
	virtual void PostLoad() override;
	virtual void PreEditChange(FProperty* PropertyAboutToChange) override;
	virtual void PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent) override;
	// --

	// IFlowDataPinValueSupplierInterface
	virtual bool CanSupplyDataPinValues_Implementation() const override;
	// --

	// IFlowDataPinGeneratorNodeInterface
	virtual void AutoGenerateDataPins(
		TMap<FName, FName>& InOutPinNameToBoundPropertyNameMap,
		TArray<FFlowPin>& InOutInputDataPins,
		TArray<FFlowPin>& InOutOutputDataPins) const override;
	// --

private:
	void SubscribeToAssetChanges();
#endif
};
